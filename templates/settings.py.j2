# -*- coding: utf-8 -*-
from __future__ import absolute_import, division, print_function, unicode_literals

# import our default settings
"""
Ureport Settings for {{ ureport_domain }}.
"""

from ureport.settings_common import *

import os
import raven
import dj_database_url

from datetime import timedelta

from celery.schedules import crontab

DEBUG = False
THUMBNAIL_DEBUG = DEBUG
COMPRESS_ENABLED = True


EMPTY_SUBDOMAIN_HOST = 'http://{{ ureport_domain }}'
HOSTNAME = '{{ ureport_domain }}'
ALLOWED_HOSTS = ['*']
SESSION_COOKIE_DOMAIN = '{{ ureport_session_cookie_domain }}'
SESSION_COOKIE_SECURE = True

# these guys will get email from sentry
ADMINS = (
   ('Ona Ops', 'techops+{{ ureport_domain }}@ona.io'),
)

# set the mail settings, we send through gmail
EMAIL_HOST = '{{ ureport_smtp_host }}'
EMAIL_PORT = '{{ ureport_smtp_port }}'
EMAIL_HOST_USER = '{{ ureport_smtp_user }}'
EMAIL_HOST_PASSWORD = '{{ ureport_smtp_password }}'
DEFAULT_FROM_EMAIL = 'noreply+{{ ureport_domain }}@ona.io'
EMAIL_USE_TLS = {{ ureport_smtp_use_tls }}

MANAGERS = ADMINS

# add gunicorn
INSTALLED_APPS = INSTALLED_APPS + ('gunicorn', 'raven.contrib.django.raven_compat', 'storages')

# Set your DSN value
RAVEN_CONFIG = {
    'dsn': os.environ.get('RAVEN_DSN', 'MISSING_RAVEN_DSN'),
    'release': raven.fetch_git_sha(os.path.dirname(os.pardir)),
}

# we store files on S3 on prod boxes
AWS_ACCESS_KEY_ID = os.environ.get('AWS_ACCESS_KEY_ID', 'MISSING_AWS_ACCESS_KEY_ID')
AWS_SECRET_ACCESS_KEY = os.environ.get('AWS_SECRET_ACCESS_KEY', 'MISSING_AWS_SECRET_ACCESS_KEY')
AWS_STORAGE_BUCKET_NAME = '{{ ureport_s3_bucket }}'
AWS_S3_SECURE_URLS = True
DEFAULT_FILE_STORAGE = 'storages.backends.s3boto3.S3Boto3Storage'

# these two settings will cause our aws files to never expire
# see http://developer.yahoo.com/performance/rules.html#expires
AWS_QUERYSTRING_AUTH = False
AWS_S3_OBJECT_PARAMETERS = {
    'CacheControl': 'max-age=86400',
}

# static dir is different for prod
STATIC_URL = '/sitestatic/'
COMPRESS_URL = '/sitestatic/'

# our media is all on S3
MEDIA_URL = 'https://{{ ureport_s3_bucket }}.s3.amazonaws.com/'
STATIC_URL = 'https://{{ ureport_s3_bucket }}.s3.amazonaws.com/'
COMPRESS_URL = 'https://{{ ureport_s3_bucket }}.s3.amazonaws.com/'

# List of finder classes that know how to find static files in
# various locations.
STATICFILES_FINDERS = (
    'django.contrib.staticfiles.finders.FileSystemFinder',
    'django.contrib.staticfiles.finders.AppDirectoriesFinder',
    'compressor.finders.CompressorFinder',
)
STATICFILES_STORAGE = 'storages.backends.s3boto3.S3Boto3Storage'

SITE_API_HOST = 'https://{{ ureport_rapidpro_domain }}'


DATABASES['default'] = dj_database_url.config()

# reuse our connections for up to 60 seconds
DATABASES['default']['CONN_MAX_AGE'] = 60

# no debug toolbar in prod
MIDDLEWARE = (
    'raven.contrib.django.raven_compat.middleware.SentryResponseErrorIdMiddleware',
    'django.middleware.common.CommonMiddleware',
    'django.contrib.sessions.middleware.SessionMiddleware',
    'django.middleware.csrf.CsrfViewMiddleware',
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    'django.contrib.messages.middleware.MessageMiddleware',
    'smartmin.middleware.AjaxRedirect',
    'django.middleware.locale.LocaleMiddleware',
    'dash.orgs.middleware.SetOrgMiddleware',
)

LOGGING = {
    'version': 1,
    'disable_existing_loggers': True,
    'root': {
        'level': 'WARNING',
        'handlers': ['sentry'],
    },
    'formatters': {
        'verbose': {
            'format': '%(levelname)s %(asctime)s %(module)s %(process)d %(thread)d %(message)s'
        },
    },
    'handlers': {
        'sentry': {
            'level': 'ERROR',
            'class': 'raven.contrib.django.raven_compat.handlers.SentryHandler',
        },
        'console': {
            'level': 'DEBUG',
            'class': 'logging.StreamHandler',
            'formatter': 'verbose'
        },
        'null': {
            'level': 'DEBUG',
            'class': 'logging.NullHandler',
        },
    },
    'loggers': {
        'django.db.backends': {
            'level': 'ERROR',
            'handlers': ['console'],
            'propagate': False,
        },
        'raven': {
            'level': 'DEBUG',
            'handlers': ['console'],
            'propagate': False,
        },
        'sentry.errors': {
            'level': 'DEBUG',
            'handlers': ['console'],
            'propagate': False,
        },
        'django.security.DisallowedHost': {
            'handlers': ['null'],
            'propagate': False,
        },
    },
}

# use our cache backend for sessions
SESSION_ENGINE = "django.contrib.sessions.backends.cached_db"
SESSION_CACHE_ALIAS = "default"

# trust connections that are coming in on this protocol
SECURE_PROXY_SSL_HEADER = ('HTTP_X_FORWARDED_PROTO', 'HTTPS')

# compress arguments
COMPRESS_CSS_HASHING_METHOD = 'content'
COMPRESS_OFFLINE = True
COMPRESS_OFFLINE_CONTEXT = dict(STATIC_URL=STATIC_URL, base_template='frame.html', org=None, debug=False, testing=False)
COMPRESS_STORAGE = 'storages.backends.s3boto3.S3Boto3Storage'

REDIS_HOST = '{{ ureport_redis_host }}'

BROKER_BACKEND = '{{ ureport_broker_backend }}'
BROKER_HOST = REDIS_HOST
BROKER_PORT = {{ ureport_broker_port }}
BROKER_VHOST = '{{ ureport_broker_vhost }}'

BROKER_URL = '%s://%s:%s/%s' % (BROKER_BACKEND, BROKER_HOST, BROKER_PORT, BROKER_VHOST)

CACHES = {
    'default': {
        'BACKEND': 'django_redis.cache.RedisCache',
        'LOCATION': BROKER_URL,
        'OPTIONS': {
            'CLIENT_CLASS': 'django_redis.client.DefaultClient',
        }
    }
}

CELERY_RESULT_BACKEND = BROKER_URL

PREVIOUS_ORG_SITES = []
PROD = {{ ureport_is_production }}
